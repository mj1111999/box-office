{"ast":null,"code":"import { useReducer, useEffect, useState } from 'react';\nimport { apiGet } from './config';\n\nfunction showsReducer(prevState, action) {\n  switch (action.type) {\n    case 'ADD':\n      {\n        return [...prevState, action.showId];\n      }\n\n    case 'REMOVE':\n      {\n        return prevState.filter(showId => showId !== action.showId);\n      }\n\n    default:\n      return prevState;\n  }\n}\n\nfunction usePersistedReducer(reducer, initialState, key) {\n  const [state, dispatch] = useReducer(reducer, initialState, initial => {\n    const persisted = localStorage.getItem(key);\n    return persisted ? JSON.parse(persisted) : initial;\n  });\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [state, key]);\n  return [state, dispatch];\n}\n\nexport function useShows(key = 'shows') {\n  return usePersistedReducer(showsReducer, [], key);\n}\nexport function useLastQuery(key = 'lastQuery') {\n  const [input, setInput] = useState(() => {\n    const persisted = sessionStorage.getItem(key);\n    return persisted ? JSON.parse(persisted) : '';\n  });\n\n  const setPersistedInput = newState => {\n    setInput(newState);\n    sessionStorage.setItem(key, JSON.stringify(newState));\n  };\n\n  return [input, setPersistedInput];\n}\n\nconst reducer = (prevState, action) => {\n  switch (action.type) {\n    case 'FETCH_SUCCESS':\n      {\n        return {\n          isLoading: false,\n          error: null,\n          show: action.show\n        };\n      }\n\n    case 'FETCH_FAILED':\n      {\n        return { ...prevState,\n          isLoading: false,\n          error: action.error\n        };\n      }\n\n    default:\n      return prevState;\n  }\n};\n\nexport function useShow(showId) {\n  const [state, dispatch] = useReducer(reducer, {\n    show: null,\n    isLoading: true,\n    error: null\n  });\n  useEffect(() => {\n    let isMounted = true;\n    apiGet(`/shows/${showId}?embed[]=seasons&embed[]=cast`).then(results => {\n      if (isMounted) {\n        dispatch({\n          type: 'FETCH_SUCCESS',\n          show: results\n        });\n      }\n    }).catch(err => {\n      if (isMounted) {\n        dispatch({\n          type: 'FETCH_FAILED',\n          error: err.message\n        });\n      }\n    });\n    return () => {\n      isMounted = false;\n    };\n  }, [showId]);\n  return state;\n}","map":{"version":3,"sources":["D:/Sem 7/Internshala/The Box Office/src/misc/custom-hooks.js"],"names":["useReducer","useEffect","useState","apiGet","showsReducer","prevState","action","type","showId","filter","usePersistedReducer","reducer","initialState","key","state","dispatch","initial","persisted","localStorage","getItem","JSON","parse","setItem","stringify","useShows","useLastQuery","input","setInput","sessionStorage","setPersistedInput","newState","isLoading","error","show","useShow","isMounted","then","results","catch","err","message"],"mappings":"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","sourcesContent":["import { useReducer, useEffect, useState } from 'react';\r\nimport { apiGet } from './config';\r\n\r\nfunction showsReducer(prevState, action) {\r\n  switch (action.type) {\r\n    case 'ADD': {\r\n      return [...prevState, action.showId];\r\n    }\r\n\r\n    case 'REMOVE': {\r\n      return prevState.filter(showId => showId !== action.showId);\r\n    }\r\n\r\n    default:\r\n      return prevState;\r\n  }\r\n}\r\n\r\nfunction usePersistedReducer(reducer, initialState, key) {\r\n  const [state, dispatch] = useReducer(reducer, initialState, initial => {\r\n    const persisted = localStorage.getItem(key);\r\n\r\n    return persisted ? JSON.parse(persisted) : initial;\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(key, JSON.stringify(state));\r\n  }, [state, key]);\r\n\r\n  return [state, dispatch];\r\n}\r\n\r\nexport function useShows(key = 'shows') {\r\n  return usePersistedReducer(showsReducer, [], key);\r\n}\r\n\r\nexport function useLastQuery(key = 'lastQuery') {\r\n  const [input, setInput] = useState(() => {\r\n    const persisted = sessionStorage.getItem(key);\r\n\r\n    return persisted ? JSON.parse(persisted) : '';\r\n  });\r\n\r\n  const setPersistedInput = newState => {\r\n    setInput(newState);\r\n    sessionStorage.setItem(key, JSON.stringify(newState));\r\n  };\r\n\r\n  return [input, setPersistedInput];\r\n}\r\n\r\nconst reducer = (prevState, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_SUCCESS': {\r\n      return { isLoading: false, error: null, show: action.show };\r\n    }\r\n\r\n    case 'FETCH_FAILED': {\r\n      return { ...prevState, isLoading: false, error: action.error };\r\n    }\r\n\r\n    default:\r\n      return prevState;\r\n  }\r\n};\r\n\r\nexport function useShow(showId) {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    show: null,\r\n    isLoading: true,\r\n    error: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    apiGet(`/shows/${showId}?embed[]=seasons&embed[]=cast`)\r\n      .then(results => {\r\n        if (isMounted) {\r\n          dispatch({ type: 'FETCH_SUCCESS', show: results });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (isMounted) {\r\n          dispatch({ type: 'FETCH_FAILED', error: err.message });\r\n        }\r\n      });\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [showId]);\r\n\r\n  return state;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}