{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sem 7\\\\Internshala\\\\The Box Office\\\\src\\\\pages\\\\Starred.js\";\nimport React, { useState, useEffect } from 'react';\nimport MainPageLayout from '../components/MainPageLayout';\nimport { apiGet } from '../misc/config';\nimport { useShows } from '../misc/custom-hooks';\n\nconst Starred = () => {\n  const [starred] = useShows();\n  const [shows, setShows] = useShows(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (starred && starred.length > 0) {\n      const promises = starred.map(showId => apiGet(`/shows/${showId}`));\n      Promise.all(promises).then(results => {\n        setShows(results);\n        setIsLoading(false);\n      }).catch(err => {\n        setError(err.message);\n        setIsLoading(false);\n      });\n    } else {\n      setIsLoading(false);\n    }\n  }, [starred]);\n  return /*#__PURE__*/React.createElement(MainPageLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    }\n  }, \"Shows are still loading\"), error && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, \"Error Occured: \", error), !isLoading && !shows && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 32\n    }\n  }, \"No shows\"));\n};\n\nexport default Starred;","map":{"version":3,"sources":["D:/Sem 7/Internshala/The Box Office/src/pages/Starred.js"],"names":["React","useState","useEffect","MainPageLayout","apiGet","useShows","Starred","starred","shows","setShows","isLoading","setIsLoading","error","setError","length","promises","map","showId","Promise","all","then","results","catch","err","message"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,QAAT,QAAyB,sBAAzB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAM,CAACC,OAAD,IAAYF,QAAQ,EAA1B;AAEA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,OAAO,IAAIA,OAAO,CAACO,MAAR,GAAiB,CAAhC,EAAmC;AACjC,YAAMC,QAAQ,GAAGR,OAAO,CAACS,GAAR,CAAYC,MAAM,IAAIb,MAAM,CAAE,UAASa,MAAO,EAAlB,CAA5B,CAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EACGK,IADH,CACQC,OAAO,IAAI;AACfZ,QAAAA,QAAQ,CAACY,OAAD,CAAR;AACAV,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAJH,EAKGW,KALH,CAKSC,GAAG,IAAI;AACZV,QAAAA,QAAQ,CAACU,GAAG,CAACC,OAAL,CAAR;AACAb,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OARH;AASD,KAXD,MAWO;AACLA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAfQ,EAeN,CAACJ,OAAD,CAfM,CAAT;AAiBA,sBACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADhB,EAEGE,KAAK,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAqBA,KAArB,CAFZ,EAGG,CAACF,SAAD,IAAc,CAACF,KAAf,iBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAH3B,CADF;AAOD,CA/BD;;AAiCA,eAAeF,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MainPageLayout from '../components/MainPageLayout';\nimport { apiGet } from '../misc/config';\nimport { useShows } from '../misc/custom-hooks';\n\nconst Starred = () => {\n  const [starred] = useShows();\n\n  const [shows, setShows] = useShows(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (starred && starred.length > 0) {\n      const promises = starred.map(showId => apiGet(`/shows/${showId}`));\n      Promise.all(promises)\n        .then(results => {\n          setShows(results);\n          setIsLoading(false);\n        })\n        .catch(err => {\n          setError(err.message);\n          setIsLoading(false);\n        });\n    } else {\n      setIsLoading(false);\n    }\n  }, [starred]);\n\n  return (\n    <MainPageLayout>\n      {isLoading && <div>Shows are still loading</div>}\n      {error && <div>Error Occured: {error}</div>}\n      {!isLoading && !shows && <div>No shows</div>}\n    </MainPageLayout>\n  );\n};\n\nexport default Starred;\n"]},"metadata":{},"sourceType":"module"}