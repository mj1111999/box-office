{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sem 7\\\\Internshala\\\\The Box Office\\\\src\\\\pages\\\\Show.js\";\nimport React, { useEffect, useReducer } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { apiGet } from '../misc/config';\n\nconst reducer = (prevState, action) => {\n  switch (action.type) {\n    case 'FETCH_SUCCESS':\n      {\n        return {\n          isLoading: false,\n          error: null,\n          show: action.show\n        };\n      }\n\n    case 'FETCH_FAILED':\n      {\n        return { ...prevState,\n          isLoading: false,\n          error: action.error\n        };\n      }\n\n    default:\n      return prevState;\n  }\n};\n\nconst initialState = {\n  show: null,\n  isLoading: true,\n  error: null\n};\n\nconst Show = () => {\n  const {\n    id\n  } = useParams();\n  useReducer(reducer, initialState); //const [show, setShow] = useState(null);\n  //const [isLoading, setIsLoading] = useState(true);\n  //const [error, setError] = useState(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    apiGet(`/shows//${id}?embed[]=seasons&embed[]=cast`).then(results => {\n      if (isMounted) {\n        setShow(results);\n        setIsLoading(false);\n      }\n    }).catch(err => {\n      if (isMounted) {\n        setError(err.message);\n        setIsLoading(false);\n      }\n    });\n    return () => {\n      isMounted = false;\n    };\n  }, [id]);\n  console.log('show', show);\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 12\n      }\n    }, \"Data is being loaded\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 10\n    }\n  }, \"this is show page\");\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 12\n      }\n    }, \"Error Occured: \", error);\n  }\n};\n\nexport default Show;","map":{"version":3,"sources":["D:/Sem 7/Internshala/The Box Office/src/pages/Show.js"],"names":["React","useEffect","useReducer","useParams","apiGet","reducer","prevState","action","type","isLoading","error","show","initialState","Show","id","isMounted","then","results","setShow","setIsLoading","catch","err","setError","message","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AAEA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,MAAT,QAAuB,gBAAvB;;AAEA,MAAMC,OAAO,GAAG,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AAAsB;AACpB,eAAO;AAAEC,UAAAA,SAAS,EAAE,KAAb;AAAoBC,UAAAA,KAAK,EAAE,IAA3B;AAAiCC,UAAAA,IAAI,EAAEJ,MAAM,CAACI;AAA9C,SAAP;AACD;;AAED,SAAK,cAAL;AAAqB;AACnB,eAAO,EAAE,GAAGL,SAAL;AAAgBG,UAAAA,SAAS,EAAE,KAA3B;AAAkCC,UAAAA,KAAK,EAAEH,MAAM,CAACG;AAAhD,SAAP;AACD;;AAED;AACE,aAAOJ,SAAP;AAVJ;AAYD,CAbD;;AAeA,MAAMM,YAAY,GAAG;AACnBD,EAAAA,IAAI,EAAE,IADa;AAEnBF,EAAAA,SAAS,EAAE,IAFQ;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;;AAMA,MAAMG,IAAI,GAAG,MAAM;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAASX,SAAS,EAAxB;AAEAD,EAAAA,UAAU,CAACG,OAAD,EAAUO,YAAV,CAAV,CAHiB,CAKjB;AACA;AACA;;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,SAAS,GAAG,IAAhB;AAEAX,IAAAA,MAAM,CAAE,WAAUU,EAAG,+BAAf,CAAN,CACGE,IADH,CACQC,OAAO,IAAI;AACf,UAAIF,SAAJ,EAAe;AACbG,QAAAA,OAAO,CAACD,OAAD,CAAP;AACAE,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KANH,EAOGC,KAPH,CAOSC,GAAG,IAAI;AACZ,UAAIN,SAAJ,EAAe;AACbO,QAAAA,QAAQ,CAACD,GAAG,CAACE,OAAL,CAAR;AACAJ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAZH;AAaA,WAAO,MAAM;AACXJ,MAAAA,SAAS,GAAG,KAAZ;AACD,KAFD;AAGD,GAnBQ,EAmBN,CAACD,EAAD,CAnBM,CAAT;AAoBAU,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBd,IAApB;;AACA,MAAIF,SAAJ,EAAe;AACb,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAP;AACD;;AACD,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAP;;AACA,MAAIC,KAAJ,EAAW;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAqBA,KAArB,CAAP;AACD;AACF,CArCD;;AAsCA,eAAeG,IAAf","sourcesContent":["import React, { useEffect, useReducer } from 'react';\r\n\r\nimport { useParams } from 'react-router-dom';\r\nimport { apiGet } from '../misc/config';\r\n\r\nconst reducer = (prevState, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_SUCCESS': {\r\n      return { isLoading: false, error: null, show: action.show };\r\n    }\r\n\r\n    case 'FETCH_FAILED': {\r\n      return { ...prevState, isLoading: false, error: action.error };\r\n    }\r\n\r\n    default:\r\n      return prevState;\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  show: null,\r\n  isLoading: true,\r\n  error: null,\r\n};\r\n\r\nconst Show = () => {\r\n  const { id } = useParams();\r\n\r\n  useReducer(reducer, initialState);\r\n\r\n  //const [show, setShow] = useState(null);\r\n  //const [isLoading, setIsLoading] = useState(true);\r\n  //const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    apiGet(`/shows//${id}?embed[]=seasons&embed[]=cast`)\r\n      .then(results => {\r\n        if (isMounted) {\r\n          setShow(results);\r\n          setIsLoading(false);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (isMounted) {\r\n          setError(err.message);\r\n          setIsLoading(false);\r\n        }\r\n      });\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [id]);\r\n  console.log('show', show);\r\n  if (isLoading) {\r\n    return <div>Data is being loaded</div>;\r\n  }\r\n  return <div>this is show page</div>;\r\n  if (error) {\r\n    return <div>Error Occured: {error}</div>;\r\n  }\r\n};\r\nexport default Show;\r\n"]},"metadata":{},"sourceType":"module"}