{"version":3,"sources":["components/Navs.js","components/Title.js","components/MainPageLayout.js","pages/Home.js","pages/Starred.js","App.js","serviceWorker.js","index.js"],"names":["LINKS","to","text","Navs","map","item","key","Title","title","subtitle","MainPageLayout","children","Home","useState","input","setInput","onSearch","fetch","then","r","json","result","console","log","type","onChange","ev","target","value","onKeyDown","keyCode","onClick","Starred","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kPAGMA,EAAQ,CACZ,CAAEC,GAAI,IAAKC,KAAM,QACjB,CAAED,GAAI,WAAYC,KAAM,YAiBXC,EAdF,WACX,OACE,6BACE,4BACGH,EAAMI,KAAI,SAAAC,GAAI,OACb,wBAAIC,IAAKD,EAAKJ,IACZ,kBAAC,IAAD,CAAMA,GAAII,EAAKJ,IAAKI,EAAKH,aCHtBK,EATD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACE,6BACE,4BAAKD,GACL,2BAAIC,KCYKC,EAdQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxB,OACE,6BACE,kBAAC,EAAD,CACEH,MAAM,aACNC,SAAS,6CAEX,kBAAC,EAAD,MAECE,ICyBQC,EAnCF,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACVC,EADU,KACHC,EADG,KAEXC,EAAW,WAEfC,MAAM,yCAAD,OAA0CH,IAC5CI,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,OAalB,OACE,kBAAC,EAAD,KACE,2BACEG,KAAK,OACLC,SAdgB,SAAAC,GACpBX,EAASW,EAAGC,OAAOC,QAcfC,UAZY,SAAAH,GACG,KAAfA,EAAGI,SACLd,IAEFM,QAAQC,IAAIG,EAAGI,UASXF,MAAOd,IAET,4BAAQU,KAAK,SAASO,QAASf,GAA/B,YCxBSgB,EAJC,WACd,OAAO,kBAAC,EAAD,yBCoBMC,MAlBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,YAChB,kBAAC,EAAD,OAGF,kBAAC,IAAD,KACE,6CCNYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.8266b690.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst LINKS = [\n  { to: '/', text: 'Home' },\n  { to: '/starred', text: 'Starred' },\n];\n\nconst Navs = () => {\n  return (\n    <div>\n      <ul>\n        {LINKS.map(item => (\n          <li key={item.to}>\n            <Link to={item.to}>{item.text}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Navs;\n","import React from 'react';\n\nconst Title = ({ title, subtitle }) => {\n  return (\n    <div>\n      <h1>{title}</h1>\n      <p>{subtitle}</p>\n    </div>\n  );\n};\n\nexport default Title;\n","import React from 'react';\nimport Navs from './Navs';\nimport Title from './Title';\n\nconst MainPageLayout = ({ children }) => {\n  return (\n    <div>\n      <Title\n        title=\"Box Office\"\n        subtitle=\"Are you looking for a movie or an actor?\"\n      />\n      <Navs />\n\n      {children}\n    </div>\n  );\n};\n\nexport default MainPageLayout;\n","import React, { useState } from 'react';\nimport MainPageLayout from '../components/MainPageLayout';\n\nconst Home = () => {\n  const [input, setInput] = useState('');\n  const onSearch = () => {\n    //https://api.tvmaze.com/search/shows?q=men\n    fetch(`https://api.tvmaze.com/search/shows?q=${input}`)\n      .then(r => r.json())\n      .then(result => {\n        console.log(result);\n      });\n  };\n  const onInputChange = ev => {\n    setInput(ev.target.value);\n  };\n  const onKeyDown = ev => {\n    if (ev.keyCode === 13) {\n      onSearch();\n    }\n    console.log(ev.keyCode);\n  };\n\n  return (\n    <MainPageLayout>\n      <input\n        type=\"text\"\n        onChange={onInputChange}\n        onKeyDown={onKeyDown}\n        value={input}\n      />\n      <button type=\"button\" onClick={onSearch}>\n        Search\n      </button>\n    </MainPageLayout>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport MainPageLayout from '../components/MainPageLayout';\n\nconst Starred = () => {\n  return <MainPageLayout>this is starred</MainPageLayout>;\n};\n\nexport default Starred;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Starred from './pages/Starred';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Home />\n      </Route>\n\n      <Route exact path=\"/starred\">\n        <Starred />\n      </Route>\n\n      <Route>\n        <div>Not found</div>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}